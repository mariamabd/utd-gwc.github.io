{"version":3,"sources":["static/gwc2020_website_logo_nobg.png","components/Logo.js","components/Body.js","hooks/useGWCTheme.js","App.js","hooks/useComponentScroll.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","scrollTop","GLOBAL_SIZE_XSMALL","defaultProps","theme","global","size","xsmall","match","GLOBAL_SIZE_XXSMALL","xxsmall","Box","align","height","Math","max","Image","src","logo","fit","fill","a11yTitle","Body","innerRef","children","as","overflow","ref","pad","font","family","checkBox","border","color","dark","light","hover","toggle","background","lightTheme","colors","brand","active","focus","white","darkTheme","App","useState","isLightMode","setIsLightMode","document","body","setScrollTop","handleOnScroll","useRef","useEffect","div","current","addEventListener","removeEventListener","useComponentScroll","e","target","Grommet","full","Main","Header","left","right","vertical","elevation","style","transition","justify","CheckBox","onChange","map","Heading","level","margin","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uD,wMCM5B,SAASC,EAAT,GAA8B,IAAdC,EAAa,EAAbA,UACvBC,EAAqBC,IAAaC,MAAMC,OAAOC,KAAKC,OAAOC,MAC/D,OACA,GACIC,EAAsBN,IAAaC,MAAMC,OAAOC,KAAKI,QAAQF,MACjE,OACA,GACF,OACE,kBAACG,EAAA,EAAD,CACEC,MAAM,SACNC,OACEC,KAAKC,IAAIb,EAAqBD,EAAWQ,GAAuB,MAGlE,kBAACO,EAAA,EAAD,CACEC,IAAKC,IACLC,IAAI,UACJC,KAAK,WACLC,UAAU,6BCrBH,SAASC,EAAT,GAAuC,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACvC,OACE,kBAACb,EAAA,EAAD,CAAKc,GAAG,OAAOC,SAAS,OAAOC,IAAKJ,EAAUK,IAAI,UAC/CJ,G,WCNDK,EAAO,CACXA,KAAM,CACJC,OAAQ,SACRxB,KAAM,OACNO,OAAQ,SAINkB,EAAW,CACfA,SAAU,CACRC,OAAQ,CACNC,MAAO,CACLC,KAAM,YACNC,MAAO,cAGXC,MAAO,CACLJ,OAAQ,CACNC,MAAO,CACLC,KAAM,QACNC,MAAO,WAIbE,OAAQ,CACNC,WAAY,CACVJ,KAAM,YACNC,MAAO,gBAMTI,EAAU,aACdlC,OAAO,aACLmC,OAAQ,CACNC,MAAO,UACP,WAAY,UACZ,YAAa,UACb,WAAY,UACZ,YAAa,UACb,WAAY,UACZ,YAAa,UACb,YAAa,UACbC,OAAQ,YACRC,MAAO,YACPC,MAAO,UACPN,WAAY,YAEXT,IAEFE,GAGCc,EAAS,aACbxC,OAAO,aACLmC,OAAQ,CACNC,MAAO,UACP,WAAY,UACZ,YAAa,UACb,WAAY,UACZ,YAAa,UACb,WAAY,UACZ,YAAa,UACb,YAAa,UACbC,OAAQ,YACRC,MAAO,YACPC,MAAO,UACPN,WAAY,YAEXT,IAEFE,GCtBUe,MA3Cf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEqBF,mBAASG,SAASC,KAAKlD,WAF5C,mBAENA,EAFM,KAEKmD,EAFL,KAQP7B,ECbO,SAA4B8B,GAEzC,IAAM9B,EAAW+B,iBAAO,MAYxB,OAVAC,qBAAU,WACR,IAAMC,EAAMjC,EAASkC,QAGrB,OADAD,EAAIE,iBAAiB,SAAUL,GACxB,WAELG,EAAIG,oBAAoB,SAAUN,MAEnC,IAEI9B,EDDUqC,EAJM,SAACC,GACtBT,EAAaS,EAAEC,OAAO7D,cAKxB,OACE,kBAAC8D,EAAA,EAAD,CAAS3D,MAAO4C,EAAcT,EAAaM,EAAWmB,MAAI,GACxD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEtC,IAAK,CAAEuC,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVhC,WAAyB,GAAbrC,EAAiB,aAAe,YAC5CsE,MAAO,CAAEC,WAAY,yBAErB,kBAACxE,EAAD,CAAMC,UAAWA,IACjB,kBAACU,EAAA,EAAD,CAAK8D,QAAQ,UAAUrD,KAAK,aAAaR,MAAM,OAC7C,kBAAC8D,EAAA,EAAD,CACErC,QAAM,EACNsC,SAAU,WACR1B,GAAgBD,QAKxB,kBAAC1B,EAAD,CAAMC,SAAUA,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGqD,KAAI,WACvD,OACE,kBAACC,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QAA1B,6BE3BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3E,MACvB,2DCbN4E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fbe92d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gwc2020_website_logo_nobg.63e40a6a.png\";","import React from \"react\";\nimport { Box, Image, defaultProps } from \"grommet\";\n\nimport logo from \"./../static/gwc2020_website_logo_nobg.png\";\n\n\nexport default function Logo({ scrollTop }) {\n  const GLOBAL_SIZE_XSMALL = defaultProps.theme.global.size.xsmall.match(\n    /\\d+/\n  )[0];\n  const GLOBAL_SIZE_XXSMALL = defaultProps.theme.global.size.xxsmall.match(\n    /\\d+/\n  )[0];\n  return (\n    <Box\n      align=\"center\"\n      height={\n        Math.max(GLOBAL_SIZE_XSMALL - scrollTop, GLOBAL_SIZE_XXSMALL) + \"px\"\n      }\n    >\n      <Image\n        src={logo}\n        fit=\"contain\"\n        fill=\"vertical\"\n        a11yTitle=\"UTD Girls Who Code logo\"\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box } from \"grommet\";\n\nexport default function Body({ innerRef, children }) {\n  return (\n    <Box as=\"body\" overflow=\"auto\" ref={innerRef} pad=\"medium\">\n      {children}\n    </Box>\n  );\n}\n","const font = {\n  font: {\n    family: \"Roboto\",\n    size: \"18px\",\n    height: \"20px\",\n  },\n};\n\nconst checkBox = {\n  checkBox: {\n    border: {\n      color: {\n        dark: \"neutral-1\",\n        light: \"neutral-1\",\n      },\n    },\n    hover: {\n      border: {\n        color: {\n          dark: \"white\",\n          light: \"brand\",\n        },\n      },\n    },\n    toggle: {\n      background: {\n        dark: \"neutral-1\",\n        light: \"neutral-1\",\n      },\n    },\n  },\n};\n\nconst lightTheme = {\n  global: {\n    colors: {\n      brand: \"#F794B9\",\n      \"accent-1\": \"#002364\",\n      \"neutral-1\": \"#1B3A5D\",\n      \"accent-2\": \"#FFFFFF\",\n      \"neutral-2\": \"#ECEDF8\",\n      \"accent-3\": \"#FCC0C5\",\n      \"neutral-3\": \"#B67186\",\n      \"neutral-4\": \"#B84C65\",\n      active: \"neutral-4\",\n      focus: \"neutral-1\",\n      white: \"#ECEDF8\",\n      background: \"#ECEDF8\",\n    },\n    ...font,\n  },\n  ...checkBox,\n};\n\nconst darkTheme = {\n  global: {\n    colors: {\n      brand: \"#002364\",\n      \"accent-1\": \"#F794B9\",\n      \"neutral-1\": \"#B84C65\",\n      \"accent-2\": \"#FCC0C5\",\n      \"neutral-2\": \"#B67186\",\n      \"accent-3\": \"#FFFFFF\",\n      \"neutral-3\": \"#ECEDF8\",\n      \"neutral-4\": \"#1B3A5D\",\n      active: \"neutral-3\",\n      focus: \"neutral-1\",\n      white: \"#ECEDF8\",\n      background: \"#1B3A5D\",\n    },\n    ...font,\n  },\n  ...checkBox,\n};\n\nexport { lightTheme, darkTheme };\n","import React, { useState } from \"react\";\nimport { Box, Grommet, Heading, Main, CheckBox, Header } from \"grommet\";\nimport Logo from \"./components/Logo.js\";\nimport Body from \"./components/Body.js\";\nimport useComponentScroll from \"./hooks/useComponentScroll.js\";\nimport { lightTheme, darkTheme } from \"./hooks/useGWCTheme.js\";\n\nfunction App() {\n  const [isLightMode, setIsLightMode] = useState(true);\n  const [scrollTop, setScrollTop] = useState(document.body.scrollTop);\n\n  const handleOnScroll = (e) => {\n    setScrollTop(e.target.scrollTop);\n  };\n\n  const innerRef = useComponentScroll(handleOnScroll);\n\n  return (\n    <Grommet theme={isLightMode ? lightTheme : darkTheme} full>\n      <Main>\n        <Header\n          pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n          elevation=\"xsmall\"\n          background={scrollTop == 0 ? \"background\" : \"neutral-3\"}\n          style={{ transition: \"background-color .4s\" }}\n        >\n          <Logo scrollTop={scrollTop} />\n          <Box justify=\"between\" fill=\"horizontal\" align=\"end\">\n            <CheckBox\n              toggle\n              onChange={() => {\n                setIsLightMode(!isLightMode);\n              }}\n            />\n          </Box>\n        </Header>\n        <Body innerRef={innerRef}>\n          {[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1].map(() => {\n            return (\n              <Heading level=\"1\" margin=\"none\">\n                UTD Girls Who Code\n              </Heading>\n            );\n          })}\n        </Body>\n      </Main>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport default function useComponentScroll(handleOnScroll) {\n  // create element ref\n  const innerRef = useRef(null);\n\n  useEffect(() => {\n    const div = innerRef.current;\n    // subscribe event\n    div.addEventListener(\"scroll\", handleOnScroll);\n    return () => {\n      // unsubscribe event\n      div.removeEventListener(\"scroll\", handleOnScroll);\n    };\n  }, []);\n\n  return innerRef;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}