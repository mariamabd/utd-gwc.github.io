{"version":3,"sources":["static/gwc2020_website_logo_nobg.png","components/Logo.js","components/Body.js","components/Section.js","components/LoadingSpinner.js","components/EventCard.js","components/GridGenerator.js","components/EventsSection.js","hooks/useGWCTheme.js","App.js","hooks/useComponentScroll.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","scrollTop","GLOBAL_SIZE_XSMALL","defaultProps","theme","global","size","xsmall","match","GLOBAL_SIZE_XXSMALL","xxsmall","React","useContext","ResponsiveContext","Box","align","height","Math","max","style","transition","pad","left","Image","src","logo","fit","fill","a11yTitle","Body","innerRef","children","as","overflow","ref","Section","title","margin","horizontal","bottom","Heading","level","spinning","version","viewBox","width","opacity","d","attributeName","type","from","to","dur","repeatCount","LoadingSpinner","justify","EventCard","props","Card","background","elevation","CardHeader","wrap","date","CardBody","Paragraph","description","CardFooter","Button","icon","color","hoverIndicator","GridGenerator","cols","fullRow","window","innerWidth","dynamicCols","setDynamicCols","updateCols","outerWidth","addEventListener","removeEventListener","colWidth","rows","chunk","toArray","map","col","sm","md","EventsSection","useState","events","setEvents","loadingEvents","setLoadingEvents","a","fetch","method","res","json","console","log","useEffect","getEvents","direction","event","dateString","timeString","tempDate","Date","toLocaleDateString","toLocaleTimeString","font","family","checkBox","border","dark","light","hover","toggle","none","small","medium","large","xlarge","lightTheme","colors","brand","active","focus","white","darkTheme","App","isLightMode","setIsLightMode","document","body","setScrollTop","handleOnScroll","useRef","div","current","useComponentScroll","e","target","Grommet","full","Main","Header","right","vertical","CheckBox","onChange","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fcc0e524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gwc2020_website_logo_nobg.63e40a6a.png\";","import React from \"react\";\nimport { Box, Image, defaultProps, ResponsiveContext } from \"grommet\";\n\nimport logo from \"./../static/gwc2020_website_logo_nobg.png\";\n\n\nexport default function Logo({ scrollTop }) {\n  const GLOBAL_SIZE_XSMALL = defaultProps.theme.global.size.xsmall.match(\n    /\\d+/\n  )[0];\n  const GLOBAL_SIZE_XXSMALL = defaultProps.theme.global.size.xxsmall.match(\n    /\\d+/\n  )[0];\n  const size = React.useContext(ResponsiveContext);\n  return (\n    <Box\n      align=\"center\"\n      height={\n        Math.max(GLOBAL_SIZE_XSMALL - scrollTop, GLOBAL_SIZE_XXSMALL) + \"px\"\n      }\n      style={{transition: \"height .05s ease\"}}\n      pad={{left: size===\"small\" ? \"large\" : \"none\"}}\n    >\n      <Image\n        src={logo}\n        fit=\"contain\"\n        fill=\"vertical\"\n        a11yTitle=\"UTD Girls Who Code logo\"\n      />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box } from \"grommet\";\n\nexport default function Body({ innerRef, children }) {\n  return (\n    <Box as=\"body\" overflow=\"auto\" ref={innerRef} pad=\"medium\">\n      {children}\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box, Heading } from 'grommet'\n\n\nexport default function Section({ title, children }) {\n    return (\n        <Box margin={{ horizontal: \"medium\", bottom: \"small\" }}>\n            <Heading level=\"2\" margin=\"none\">\n                {title}\n            </Heading>\n            {children}\n        </Box>\n    )\n}","import React from \"react\";\nimport { Box } from \"grommet\";\n\nconst spinning = (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 32 32\"\n    width=\"28px\"\n    height=\"28px\"\n    fill=\"#F794B9\"\n  >\n    <path\n      opacity=\".25\"\n      d=\"M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4\"\n    />\n    <path d=\"M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z\">\n      <animateTransform\n        attributeName=\"transform\"\n        type=\"rotate\"\n        from=\"0 16 16\"\n        to=\"360 16 16\"\n        dur=\"0.8s\"\n        repeatCount=\"indefinite\"\n      />\n    </path>\n  </svg>\n);\n\nexport const LoadingSpinner = () => (\n  <Box align=\"center\" justify=\"center\">\n    {spinning}\n  </Box>\n);\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  Paragraph,\n  Heading,\n} from \"grommet\";\nimport * as Icons from \"grommet-icons\";\n\nexport default function EventCard(props) {\n  return (\n    <Card height=\"medium\" margin=\"medium\" width=\"medium\" background=\"card-background\" elevation=\"medium\">\n      <CardHeader pad=\"small\" margin=\"none\" wrap>\n        <Heading level=\"3\" margin=\"none\">\n          {props.title}\n        </Heading>\n        <Heading level=\"4\" margin=\"none\">\n          {props.date}\n        </Heading>\n      </CardHeader>\n      <CardBody overflow=\"auto\" pad=\"medium\">\n        <Paragraph margin=\"none\">{props.description}</Paragraph>\n      </CardBody>\n      <CardFooter\n        pad={{ horizontal: \"small\" }}\n        background=\"card-footer\"\n      >\n        <Button icon={<Icons.ShareOption color=\"icon-color\" />} hoverIndicator />\n        <Button icon={<Icons.More color=\"icon-color\" />} hoverIndicator />\n      </CardFooter>\n    </Card>\n  );\n}\n","import { chunk } from 'lodash'\nimport * as React from 'react'\nimport { Col, Row, Grid } from 'react-flexbox-grid'\n\nconst GridGenerator = ({ cols, children, fullRow }) => {\n\n    const [dynamicCols, setDynamicCols] = React.useState(window.innerWidth < 1920 ? window.innerWidth < 1080 ? 6 : 4 : 3);\n\n\n    React.useEffect(() => {\n        function updateCols() {\n            setDynamicCols(window.outerWidth < 1080 ? 6 : window.outerWidth > 1968 ? 3 : 4);\n        }\n        window.addEventListener('resize', updateCols);\n        return () => {\n            window.removeEventListener('resize', updateCols);\n        }\n    }, []);\n\n    const colWidth = 12 / cols\n    const rows = chunk(React.Children.toArray(children), fullRow ? (12 / dynamicCols) : cols)\n    return (\n        <Grid>\n            {rows.map((cols) => (\n                <Row>\n                    {cols.map((col) => (\n                        <Col sm={12} md={fullRow ? dynamicCols : colWidth}>\n                            {col}\n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </Grid>\n    )\n}\nexport default GridGenerator","import React, { useEffect, useState } from \"react\";\nimport { Box } from \"grommet\";\nimport LoadingSpinner from \"./LoadingSpinner.js\";\nimport EventCard from \"./EventCard.js\";\nimport GridGenerator from './GridGenerator.js'\n\nexport default function EventsSection() {\n  const [events, setEvents] = useState(null);\n  const [loadingEvents, setLoadingEvents] = useState(false);\n\n  async function getEvents() {\n    try {\n      setLoadingEvents(true);\n      const res = await fetch(`https://utd-gwc-api.herokuapp.com/api/events`, {\n        method: \"GET\",\n      });\n      const events = await res.json();\n      setEvents(events);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoadingEvents(false);\n    }\n  }\n\n  useEffect(() => {\n    getEvents();\n  }, []);\n  return (\n    <Box fill=\"horizontal\" direction=\"row-responsive\" justify=\"center\">\n      {loadingEvents || events == null ? (\n        <LoadingSpinner />\n      ) : (\n          <GridGenerator fullRow>\n            {events.map((event) => {\n              var date = {\n                dateString: null,\n                timeString: null,\n              };\n              if (event.date != null) {\n                let tempDate = new Date(event.date);\n                date.dateString = tempDate.toLocaleDateString();\n                date.timeString = tempDate.toLocaleTimeString();\n              }\n              return (\n                <EventCard\n                  title={event.title}\n                  description={event.description}\n                  date={date.dateString}\n                />\n              );\n            })}\n          </GridGenerator>\n        )}\n    </Box>\n  );\n}\n","const font = {\n  font: {\n    family: \"Roboto\",\n    size: \"18px\",\n    height: \"20px\",\n  },\n};\n\nconst checkBox = {\n  checkBox: {\n    border: {\n      color: {\n        dark: \"neutral-1\",\n        light: \"neutral-1\",\n      },\n    },\n    hover: {\n      border: {\n        color: {\n          dark: \"white\",\n          light: \"brand\",\n        },\n      },\n    },\n    toggle: {\n      background: {\n        dark: \"neutral-1\",\n        light: \"neutral-1\",\n      },\n    },\n  },\n};\n\nconst elevation = {\n  elevation: {\n    light: {\n      none: \"none\",\n      xsmall: \"0px 1px 2px rgba(27, 58, 93, 0.2)\",\n      small: \"0px 2px 4px rgba(27, 58, 93, 0.2)\",\n      medium: \"0px 4px 8px rgba(27, 58, 93, 0.2)\",\n      large: \"0px 8px 16px rgba(27, 58, 93, 0.2)\",\n      xlarge: \"0px 12px 24px rgba(27, 58, 93, 0.2)\",\n    },\n    dark: {\n      none: \"none\",\n      xsmall: \"none\",\n      small: \"none\",\n      medium: \"none\",\n      large: \"none\",\n      xlarge: \"none\",\n    },\n  },\n};\n\nconst lightTheme = {\n  global: {\n    colors: {\n      brand: \"#F794B9\",\n      \"accent-1\": \"#002364\",\n      \"neutral-1\": \"#1B3A5D\",\n      \"accent-2\": \"#FFFFFF\",\n      \"neutral-2\": \"#ECEDF8\",\n      \"accent-3\": \"#FCC0C5\",\n      \"neutral-3\": \"#B67186\",\n      \"neutral-4\": \"#B84C65\",\n      active: \"accent-2\",\n      focus: \"neutral-1\",\n      white: \"#ECEDF8\",\n      background: \"#ECEDF8\",\n      \"card-background\": \"accent-2\",\n      \"card-footer\": \"accent-3\",\n      \"icon-color\": \"neutral-3\",\n    },\n    ...font,\n    ...elevation,\n  },\n  ...checkBox,\n};\n\nconst darkTheme = {\n  global: {\n    colors: {\n      brand: \"#002364\",\n      \"accent-1\": \"#F794B9\",\n      \"neutral-1\": \"#B84C65\",\n      \"accent-2\": \"#FCC0C5\",\n      \"neutral-2\": \"#B67186\",\n      \"accent-3\": \"#FFFFFF\",\n      \"neutral-3\": \"#ECEDF8\",\n      \"neutral-4\": \"#1B3A5D\",\n      active: \"neutral-1\",\n      focus: \"neutral-1\",\n      white: \"#ECEDF8\",\n      background: \"#1B3A5D\",\n      \"card-background\": \"#224975\",\n      \"card-footer\": \"accent-3\",\n      \"icon-color\": \"brand\",\n    },\n    ...font,\n    ...elevation,\n  },\n  ...checkBox,\n};\n\nexport { lightTheme, darkTheme };\n","import React, { useState } from \"react\";\nimport { Box, Grommet, Main, CheckBox, Header } from \"grommet\";\nimport Logo from \"./components/Logo.js\";\nimport Body from \"./components/Body.js\";\nimport Section from \"./components/Section.js\";\nimport EventsSection from \"./components/EventsSection.js\";\nimport useComponentScroll from \"./hooks/useComponentScroll.js\";\nimport { lightTheme, darkTheme } from \"./hooks/useGWCTheme.js\";\n\nfunction App() {\n  const [isLightMode, setIsLightMode] = useState(true);\n  const [scrollTop, setScrollTop] = useState(document.body.scrollTop);\n\n  const handleOnScroll = (e) => {\n    setScrollTop(e.target.scrollTop);\n  };\n\n  const innerRef = useComponentScroll(handleOnScroll);\n\n  return (\n    <Grommet theme={isLightMode ? lightTheme : darkTheme} full>\n      <Main>\n        <Header\n          pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n          elevation=\"xsmall\"\n          background={scrollTop === 0 ? \"background\" : \"neutral-3\"}\n          style={{ transition: \"background-color .4s\" }}\n        >\n          <Logo scrollTop={scrollTop} />\n          <Box justify=\"between\" fill=\"horizontal\" align=\"end\">\n            <CheckBox\n              toggle\n              onChange={() => {\n                setIsLightMode(!isLightMode);\n              }}\n            />\n          </Box>\n        </Header>\n        <Body innerRef={innerRef}>\n          <Section title=\"Upcoming Events\">\n            <EventsSection />\n          </Section>\n        </Body>\n      </Main>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\nexport default function useComponentScroll(handleOnScroll) {\n  // create element ref\n  const innerRef = useRef(null);\n\n  useEffect(() => {\n    const div = innerRef.current;\n    // subscribe event\n    div.addEventListener(\"scroll\", handleOnScroll);\n    return () => {\n      // unsubscribe event\n      div.removeEventListener(\"scroll\", handleOnScroll);\n    };\n  }, [handleOnScroll]);\n\n  return innerRef;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}